/*
 * MainForm.java
 *
 * Created on February 8, 2007, 5:41 AM
 */

package wikipediadesklet;

import ab5k.desklet.DeskletContainer;
import ab5k.desklet.DeskletContext;
import ab5k.utils.BusyLabel;
import ab5k.utils.CapsulePainter;
import java.awt.Color;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.RoundRectangle2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.xml.xpath.XPathExpressionException;
import org.jdesktop.animation.timing.Animator;
import org.jdesktop.animation.timing.TimingTarget;
import org.jdesktop.animation.timing.interpolation.PropertySetter;
import org.jdesktop.http.Method;
import org.jdesktop.http.async.XmlHttpRequest;
import org.jdesktop.swingx.JXPanel;
import org.jdesktop.swingx.painter.AbstractPainter;
import org.jdesktop.xpath.XPathUtils;
import org.joshy.util.u;
import org.w3c.dom.Document;
import org.xhtmlrenderer.simple.XHTMLPanel;
import org.xhtmlrenderer.simple.extend.XhtmlNamespaceHandler;

/**
 *
 * @author  joshy
 */
public class MainForm extends javax.swing.JPanel {
    
    private String css =
            "body { background: #ffff44; padding: 10px; font-size: 16pt; "+
            "font-family: Georgia; } "+
            "body { padding-left: 30px; } " +
            "p { font-family: Georgia; } "+
            "h1, h2, h3 { color: #ff4444; padding: 10px 0px;  font-family: Verdana; } "+
            "h2 { border: 1px solid black; } "+
            "a { color: blue; background: green; } ";
    
    public DeskletContext context;
    
    
    /** Creates new form MainForm */
    public MainForm() {
        initComponents();
        try {
            css = u.fileToString(getClass().getResourceAsStream("style.css"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        
        ((BusyLabel)spinnerLabel).setBaseColor(new Color(214,198,156));
        ((BusyLabel)spinnerLabel).setHighlightColor(new Color(68,51,0));
        spinnerLabel.setText("");
        
        CapsulePainter top = new CapsulePainter(CapsulePainter.Portion.Top);
        top.setFillPaint(Color.decode("#efdebd"));
        top.setBorderPaint(Color.decode("#443300"));
        CapsulePainter bottom = new CapsulePainter(CapsulePainter.Portion.Bottom);
        bottom.setFillPaint(Color.decode("#efdebd"));
        bottom.setBorderPaint(Color.decode("#443300"));
        
        ((JXPanel)searchPanel).setBackgroundPainter(top);
        ((JXPanel)bottomPanel).setBackgroundPainter(bottom);
        
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        textPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        htmlPanel = new XHTMLPanel();
        searchPanel = new JXPanel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        spinnerLabel = new BusyLabel();
        bottomPanel = new JXPanel();
        readMoreButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        textPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout htmlPanelLayout = new javax.swing.GroupLayout(htmlPanel);
        htmlPanel.setLayout(htmlPanelLayout);
        htmlPanelLayout.setHorizontalGroup(
            htmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 921, Short.MAX_VALUE)
        );
        htmlPanelLayout.setVerticalGroup(
            htmlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );
        jScrollPane1.setViewportView(htmlPanel);

        textPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 10.0;
        add(textPanel, gridBagConstraints);

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 15, 1, 15));
        searchPanel.setMinimumSize(new java.awt.Dimension(100, 40));
        searchPanel.setPreferredSize(new java.awt.Dimension(400, 40));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        jLabel1.setForeground(new java.awt.Color(68, 51, 0));
        jLabel1.setText("Wikipedia");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        spinnerLabel.setText("XXXX");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerLabel))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spinnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 10.0;
        add(searchPanel, gridBagConstraints);

        bottomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        bottomPanel.setMinimumSize(new java.awt.Dimension(100, 40));
        bottomPanel.setPreferredSize(new java.awt.Dimension(400, 40));
        readMoreButton.setText("Read More");
        readMoreButton.setOpaque(false);
        readMoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMoreButtonActionPerformed(evt);
            }
        });

        jButton2.setText("///");
        jButton2.setOpaque(false);
        jButton2.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addComponent(readMoreButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(readMoreButton)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 10.0;
        add(bottomPanel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        doSearch();
        expandText();
    }//GEN-LAST:event_searchFieldActionPerformed
    
    private void readMoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMoreButtonActionPerformed
        String wikiuri = "http://en.wikipedia.org/wiki/"+getQuery();
        try {
            Desktop.getDesktop().browse(new URI(wikiuri));
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_readMoreButtonActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doSearch();
        expandText();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void doSearch() {
        final String queryString = getQuery();
        String queryurl = "http://en.wikipedia.org/wiki/Special:Export/"+getQuery();
        p("loading: " + queryurl);
        try {
            
            ((BusyLabel)spinnerLabel).startAnimation();
            final XmlHttpRequest request = new XmlHttpRequest();
            request.open(Method.GET,queryurl,true);
            request.setOnReadyStateChange(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    if(request.getReadyState() == XmlHttpRequest.ReadyState.LOADED) {
                        ((BusyLabel)spinnerLabel).stopAnimation();
                        Document doc = request.getResponseXML();
                        //System.out.println("xml = " + XPathUtils.toXML(doc));
                        try {
                            String s = XPathUtils.getString("//ns:text/text()",doc,"http://www.mediawiki.org/xml/export-0.3/","ns");
                            String html = convertToHTML2(s, queryString);
                            
                            String baseURL = this.getClass().getResource("").toString();
                            u.p("using a base url of: " + baseURL);
                            ((XHTMLPanel)htmlPanel).setDocumentFromString(html,baseURL,new XhtmlNamespaceHandler());
                            ((XHTMLPanel)htmlPanel).getSharedContext().getTextRenderer().setSmoothingLevel(0);
                            //textArea.setCaretPosition(0);
                        } catch (XPathExpressionException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                
                
            });
            request.send();
            
            //Session s = new Session();
            //Response r = s.post(queryurl);
            //p("got : " + r.getBody());
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel htmlPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readMoreButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel spinnerLabel;
    private javax.swing.JPanel textPanel;
    // End of variables declaration//GEN-END:variables
    
    private static void p(String s) {
        System.out.println(s);
    }
    
    private static String[] regexmatch(final String s, String pattern) {
        Pattern pat = Pattern.compile(pattern);
        Matcher mat = pat.matcher(s);
        mat.find();
        String[] groups = new String[mat.groupCount()];
        for(int i=0; i<mat.groupCount(); i++) {
            groups[i] = mat.group(i+1);
        }
        return groups;
    }
    
    private String getQuery() {
        String q = searchField.getText().trim();
        q = q.replaceAll(" ","_");
        return q;
    }
    
    private void expandText() {
        try {
            //final Container win = context.getContainer().getParent().getParent().getParent().getParent();
            //final Container win = context.getContainer();
            final DeskletContainer win = context.getContainer();
            //textPanel.setSize(new Dimension(400,0));
            //textPanel.validate();
            //win.setSize(400,100);
            //win.setBackground(new Color(0,0,0,0));
            //win.setSize(400,600);
            Animator anim = PropertySetter.createAnimator(400,win,"size",
                    win.getSize(), new Dimension((int)win.getSize().getWidth(),500));
            
            anim.addTarget(new TimingTarget() {
                public void begin() {
                }
                public void end() {
                }
                public void repeat() {
                }
                public void timingEvent(float fraction) {
                    //win.validate();
                }
            });
            anim.start();
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    private String convertToHTML2(String str, String queryString) {
        StringBuffer o = new StringBuffer();
        o.append("<html><head><style type='text/css'>"+css+"</style></head><body>");
        o.append("<h1>"+queryString+"</h1>");
        o.append("<div>");
        String[] lines = str.split("\n");
        for(String line : lines) {
            
            // end if we get to the external links
            if(line.startsWith("==External links==")) { break; }
            
            // == -> <h3>
            if(line.startsWith("===")) { add(line.replaceAll("===(.*)===","<h3>$1</h3>"),o); continue; }
            if(line.startsWith("==")) { add(line.replaceAll("==(.*)==","<h2>$1</h2>"),o); continue; }
            // {{seaalso -> <i><a>text</a></i>
            if(line.startsWith("{{seealso")) { add(line.replaceAll("\\{\\{seealso\\|(.*)\\}\\}",
                    "<p><i>see also <a href=''>$1</a></i></p>"),o); continue; }
            
            // strip out all entities
            line  = line.replaceAll("&\\w+;","__");
            // strip out all html tags
            line = line.replaceAll("<(/?\\w+.*?)>","__[$1]__");
            line = line.replaceAll("<!--","");
            
            //normal paragraph line
            line = line.replaceAll("(.+)","<p>$1</p>");
            
            // [[wikiword|text]] -> <a>text</a>
            //line = line.replaceAll("\\[\\[([^|\\]]+)(|(.*))?\\]\\]","<a href='$1'>$1</a>");
            
            // [[wikiword]] -> <a>text</a>
            line = line.replaceAll("\\[\\[([\\w\\s\\.,]+)\\]\\]","<a href=''>$1</a>");
            
            // [[wikiword|text]] -> <a>text</a>
            line = line.replaceAll("\\[\\[[\\w\\s\\.,]+\\|([\\w\\s]+)\\]\\]","<a href=''>$1</a>");
            
            // strip out {{POV
            line = line.replaceAll("\\{\\{POV-statement\\}\\}","");
            // strip out {{Fact|stuff}}
            line = line.replaceAll("\\{\\{Fact\\|.+?\\}\\}","");
            
            u.p("adding: " + line);
            o.append(line);
        }
        o.append("</div>");
        o.append("</body></html>");
        return o.toString();
    }
    
    private String convertToHTML(final String s, final String queryString) {
        
        String text = s;
        String w = "[a-zA-Z0-9\\(\\) ]";
        
        // strip all html tags out
        System.out.println("text = " + text);
        // strip of the external links
        text = replaceAllDotAll(text,"==External links.*$","");
        text = replaceAllDotAll(text,"==References.*$","");
        // strip out all entities
        text = text.replaceAll("&\\w+;","__");
        // strip out all html tags
        text = text.replaceAll("<(/?\\w+.*?)>","__[$1]__");
        
        
        // turn {{seealso|.*}} into <a class='seealso'>text</a>
        text = text.replaceAll("^\\{\\{seealso\\|(.*)\\}\\}$","<p><a class='seealso'>$1</a></p>");
        // strip out all embedded comments {{}}
        text = text.replaceAll("\\{\\{.+\\}\\}","");
        
        
        
        // strip off the double {{ header
        //text = replaceAllDotAll(text,"\\{\\{.*?\\{\\{.*?\\}\\}.*?\\}\\}","");
        // strip off the single {{ header
        //text = text.replaceAll("\\{\\{.*?\\}\\}","");
        // turn lines into <p>'s
        text = Pattern.compile("^(.+)$",Pattern.MULTILINE).matcher(text).replaceAll("<p>$1</p>");
        // turn '''text''' into <b>'s
        //text = text.replaceAll("'''(.*?)'''","<b>$1</b>");
        // turn === into H3
        text = text.replaceAll("<p>===(.*?)===</p>","<h3>$1</h3>");
        // turn == into H2
        text = text.replaceAll("<p>==(.*?)==</p>","<h2>$1</h2>");
        
        // turn ''.*'' into italics
        text = text.replaceAll("''(.*)''","<i>$1</i>");
        // turn wikiwords into italics
        //text = text.replaceAll("\\[\\[(("+w+"+?)\\|)??("+w+"+?)\\]\\]","<i>$3</i>");
        
        String urlset = "[\\w\\:/\\.\\?\\=\\& \\-\\,\\(\\)]";
        // turn wiki double wiki links into anchors
        text = text.replaceAll("\\[\\[("+urlset+"+)(\\|("+urlset+"+))?\\]\\]","<a href=''>$3</a>");
        // turn wiki links into anchors
        text = text.replaceAll("\\[("+urlset+"+)\\]","<link href=''>$1</link>");
        // escape the links
        
        String html = "<html><head><style type='text/css'>"+css+"</style></head><body>"+
                "<h1>"+queryString+"</h1>\n"+
                text+"\n"+
                "</body></html>";
        System.out.println("generated: " + html);
        return html;
    }
    
    
    private String replaceAllDotAll(String text, String pattern, String replacement) {
        // strip off the external links
        text = Pattern.compile(pattern,Pattern.DOTALL)
                .matcher(text).replaceAll(replacement);
        return text;
    }
    
    private void add(String string, StringBuffer o) {
        u.p("adding: " + string);
        o.append(string);
    }
    
}
