/*
 * PhotoViewerPanel.java
 *
 * Created on February 13, 2007, 8:09 PM
 */

package photoviewerdesklet;

import ab5k.utils.BusyLabel;
import com.totsp.util.BeanArrayList;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.jdesktop.animation.timing.Animator;
import org.jdesktop.animation.timing.TimingTarget;
import org.jdesktop.animation.timing.interpolation.PropertySetter;
import org.jdesktop.jogl.EvaluatorPoint3f;
import org.jdesktop.jogl.FPSText;
import org.jdesktop.jogl.Painter3DSurface;
import org.jdesktop.jogl.Point3f;
import org.jdesktop.jogl.Scene3D;
import org.jdesktop.swingx.JXPanel;
import org.jdesktop.swingx.painter.AbstractPainter;
import org.jdesktop.swingx.painter.CompoundPainter;
import org.jdesktop.swingx.painter.ImagePainter;
import org.jdesktop.swingx.painter.MattePainter;
import org.jdesktop.swingx.painter.RectanglePainter;

/**
 *
 * @author  joshy
 */
public class PhotoViewerPanel extends javax.swing.JPanel {
    private BeanArrayList list;
    private BufferedImage currentPhoto;
    private boolean do3D = true;
    
    
    private Painter3DSurface surface1;
    private Painter3DSurface surface2;
    private Painter3DSurface surface3;
    private ImagePainter imagePainter1;
    private ImagePainter imagePainter2;
    private ImagePainter imagePainter3;
    
    private Animator anim;
    
    /** Creates new form PhotoViewerPanel */
    public PhotoViewerPanel() {
        initComponents();
        
        if(do3D) {
            setup3DPanel();
        } else {
            ((JXPanel)this.jPanel1).setBackgroundPainter(new AbstractPainter() {
                protected void doPaint(Graphics2D g, Object component, int width, int height) {
                    if(currentPhoto != null) {
                        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                        int sw = currentPhoto.getWidth(null);
                        int sh = currentPhoto.getHeight(null);
                        if(sw > width) {
                            float scale = (float)width/(float)sw;
                            sw = (int)(sw * scale);
                            sh = (int)(sh * scale);
                        }
                        if(sh > height) {
                            float scale = (float)height/(float)sh;
                            sw = (int)(sw * scale);
                            sh = (int)(sh * scale);
                        }
                        g.drawImage(currentPhoto,0,0,sw,sh,null);
                    }
                }
            });
        }
    }
    
    private void updatePhotos() {
        if(currentPhoto == null && !list.isEmpty()) {
            currentPhoto = (BufferedImage) list.get(0);
        }
        if(list.size() <= 2) {
            nextButton.setEnabled(false);
            prevButton.setEnabled(false);
        } else {
            nextButton.setEnabled(true);
            prevButton.setEnabled(true);
        }
        
        updateButtonStates();
        int n = list.indexOf(currentPhoto);
        
        // update the 3d textures
        if(currentPhoto != null && do3D && imagePainter1 != null) {
            if(n >= 0) {
                imagePainter1.setImage((BufferedImage) list.get(n));
                surface1.setDirty(true);
            }
            if(n < list.size()-1) {
                imagePainter2.setImage((BufferedImage) list.get(n+1));
                surface2.setDirty(true);
            }
            if(n < list.size()-2) {
                imagePainter3.setImage((BufferedImage) list.get(n+2));
                surface3.setDirty(true);
            }
        }
        if(!do3D) {
            repaint();
        }
    }
    
    public BeanArrayList getList() {
        return list;
    }
    
    public void setList(BeanArrayList list) {
        this.list = list;
        list.addPropertyChangeListener("photos", new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                updatePhotos();
                photoCountLabel.setText("Photos: " + PhotoViewerPanel.this.list.size());
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new JXPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        photoCountLabel = new javax.swing.JLabel();
        spinner = new BusyLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 377, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 225, Short.MAX_VALUE)
        );

        prevButton.setText("<");
        prevButton.setEnabled(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText(">");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        photoCountLabel.setText("Total: 00");

        spinner.setText("spinner");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(prevButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nextButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 112, Short.MAX_VALUE)
                        .add(spinner)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(photoCountLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(prevButton)
                    .add(nextButton)
                    .add(photoCountLabel)
                    .add(spinner))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        int n = list.indexOf(currentPhoto);
        currentPhoto = (BufferedImage) list.get(n-1);
        updatePhotos();
        if(do3D) {
            anim.setInitialFraction(1.0f);
            anim.setDirection(Animator.Direction.BACKWARD);
            anim.start();
        }
        
    }//GEN-LAST:event_prevButtonActionPerformed
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        int n = list.indexOf(currentPhoto);
        currentPhoto = (BufferedImage) list.get(n+1);
        updatePhotos();
        if(do3D) {
            anim.setInitialFraction(0.0f);
            anim.setDirection(Animator.Direction.FORWARD);
            anim.start();
        }
    }//GEN-LAST:event_nextButtonActionPerformed
    
    private void setup3DPanel() {
        // set up the scene
        final EvaluatorPoint3f eval = new EvaluatorPoint3f();
        final Scene3D scene = new Scene3D();
        scene.setPreferredSize(new Dimension(650,500));
        CompoundPainter comp;
        
        
        // set up the shared painters
        RectanglePainter rect = new RectanglePainter(10,10,10,10, 30,30, true,
                Color.BLACK, 10, Color.WHITE);
        rect.setStyle(RectanglePainter.Style.OUTLINE);
        MattePainter matte = new MattePainter(Color.WHITE);
        imagePainter1 = new ImagePainter();
        imagePainter1.setScaleToFit(true);
        imagePainter1.setScaleType(ImagePainter.ScaleType.OutsideFit);
        surface1 = new Painter3DSurface(300,300);
        comp = new CompoundPainter(rect,matte,imagePainter1);
        comp.setClipPreserved(true);
        surface1.setPainter(comp);
        surface1.setReflectionEnabled(true);
        scene.addSurface(surface1);
        
        imagePainter2 = new ImagePainter();
        imagePainter2.setScaleToFit(true);
        imagePainter2.setScaleType(ImagePainter.ScaleType.OutsideFit);
        surface2 = new Painter3DSurface(300,300);
        comp = new CompoundPainter(rect,matte,imagePainter2);
        comp.setClipPreserved(true);
        surface2.setPainter(comp);
        surface2.setReflectionEnabled(true);
        surface2.setScale(0.5f);
        scene.addSurface(surface2);
        
        imagePainter3 = new ImagePainter();
        imagePainter3.setScaleToFit(true);
        imagePainter3.setScaleType(ImagePainter.ScaleType.OutsideFit);
        surface3 = new Painter3DSurface(300,300);
        comp = new CompoundPainter(rect,matte,imagePainter3);
        comp.setClipPreserved(true);
        surface3.setPainter(comp);
        surface3.setReflectionEnabled(true);
        surface3.setScale(0.5f);
        //surf3.setYAngle(rightStartAngle);
        scene.addSurface(surface3);
        
        
        // some constants for positions
        Point3f leftStartPos = new Point3f(-10,0,-10);
        Point3f leftOffPos = new Point3f(-40,0,10);
        float leftStartAngle = 20;
        float leftOffAngle = 90;
        float leftScale = 1f;
        
        Point3f rightStartPos = new Point3f(15,-5,-10);
        float rightStartAngle = -30;
        float rightScale = 0.5f;
        
        Point3f rightOffPos = new Point3f(50,-8,-10);
        float rightOffAngle = -90;
        
        
        anim = new Animator(1000);
        anim.setAcceleration(0.7f);
        anim.setDeceleration(0.3f);
        
        surface1.setAnchor(leftStartPos);
        surface1.setYAngle(leftStartAngle);
        anim.addTarget( new PropertySetter(surface1, "anchor", eval, leftStartPos, leftOffPos));
        anim.addTarget( new PropertySetter(surface1, "yAngle", leftStartAngle, leftOffAngle) );
        
        surface2.setAnchor(rightStartPos);
        surface2.setYAngle(rightStartAngle);
        surface2.setScale(0.5f);
        anim.addTarget( new PropertySetter(surface2, "anchor", eval, rightStartPos, leftStartPos));
        anim.addTarget( new PropertySetter(surface2, "yAngle", rightStartAngle, leftStartAngle) );
        anim.addTarget( new PropertySetter(surface2, "scale", 0.5f, 1f));
        
        surface3.setAnchor(rightOffPos);
        surface3.setYAngle(rightOffAngle);
        anim.addTarget( new PropertySetter(surface3, "anchor", eval, rightOffPos, rightStartPos));
        anim.addTarget( new PropertySetter(surface3, "yAngle", rightOffAngle, rightStartAngle) );
        
        anim.setRepeatBehavior(Animator.RepeatBehavior.REVERSE);
        anim.setEndBehavior(Animator.EndBehavior.HOLD);
        
        scene.addSurface(new FPSText());
        // drop this all into a frame
        
        prevButton.setOpaque(false);
        nextButton.setOpaque(false);
        
        anim.addTarget(new TimingTarget() {
            public void begin() {
                prevButton.setEnabled(false);
                nextButton.setEnabled(false);
            }
            public void end() {
                updateButtonStates();
            }
            
            public void repeat() {  }
            public void timingEvent(float fraction) {    }
        });
        
        
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(scene,"Center");
        scene.start();
    }
    
    private void updateButtonStates() {
        prevButton.setEnabled(true);
        nextButton.setEnabled(true);
        int n = list.indexOf(currentPhoto);
        if(n == 0) {
            prevButton.setEnabled(false);
        }
        if(n >= list.size()-1) {
            nextButton.setEnabled(false);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel photoCountLabel;
    private javax.swing.JButton prevButton;
    public javax.swing.JLabel spinner;
    // End of variables declaration//GEN-END:variables
    
}
